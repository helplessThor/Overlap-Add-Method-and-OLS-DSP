# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15S23KyZVXO3BhyS1fExC8rNOBX8njNFu
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve
from math import ceil

def cc_impMatrix(h):
  h = np.roll(h, -1)
  h = h[::-1]
  M = h.size
  H = h.reshape(1, -1)
  for m in range(1, M):
    h = np.roll(h, 1)
    H = np.append(H, h.reshape(1, -1), axis=0)
  return H

"""**Overlap Add Method**"""

''''

This code is can only be shared with written permission from the author from
the official github https://github.com/helplessThor and must be shared as it is
recieved. No modifications are allowed without the consent of Author. Also if 
any modification is required then issue a PR on the github repository.

Code written on: 25/02/2021
Author:
Kuntal Paul
Department of ECE
RCC Institute of Information Technology
West Bengal, India

''''

xn = list(map(float,input("Enter Input Sequence: ").strip().split(" ")))
hn = list(map(float,input("Impulse Response Sequence: ").strip().split(" ")))
L = int(input("Enter Frame length for each sequence: ").strip())

xn, hn = np.array(xn), np.array(hn)

big_n, M = len(xn), len(hn)

N = L + M - 1

zero_h = np.zeros((N - M))
hn = np.append(hn, zero_h, axis=0)

temp = None
y_temp = np.empty((ceil(big_n/L), N))
temp_h = None


for i in range(0, ceil(big_n/L)):
  temp = xn[i*L:(i+1)*L]
  # print(temp)
  if len(temp)<L:
    zero_x = np.zeros(((N - L) + (L - len(temp))))
  else:
    zero_x = np.zeros((N - L))
  temp = np.append(temp, zero_x, axis=0)
  temp_h = cc_impMatrix(hn)

  y_temp[i] = np.dot(temp_h, temp)

print(y_temp)

y = None
for j in range(len(y_temp)):
  if j > 0 and j < len(y_temp)-1:
    for k in range(1, N-L+1):
      y_temp[j][-k] = y_temp[j][-k] + y_temp[j+1][(N-L-k)]
    y = np.append(y, y_temp[j][2:])
  elif j == len(y_temp)-1:
    y = np.append(y, y_temp[j][2:])
  else:
    print(j)
    for k in range(1, N-L+1):
      y_temp[j][-k] = y_temp[j][-k] + y_temp[j+1][(N-L-k)]
    y = np.append(y, y_temp[j])

y = y[1:]
print(y)

"""**Overlap Save Method**"""

''''

This code is can only be shared with written permission from the author from
the official github https://github.com/helplessThor and must be shared as it is
recieved. No modifications are allowed without the consent of Author. Also if 
any modification is required then issue a PR on the github repository.

Code written on: 25/02/2021
Author:
Kuntal Paul
Department of ECE
RCC Institute of Information Technology
West Bengal, India

''''




xn = list(map(float,input("Enter Input Sequence: ").strip().split(" ")))
hn = list(map(float,input("Impulse Response Sequence: ").strip().split(" ")))
L = int(input("Enter Frame length for each sequence: ").strip())

xn, hn = np.array(xn), np.array(hn)

big_n, M = len(xn), len(hn)

N = L + M - 1

zero_h = np.zeros((N - M))
hn = np.append(hn, zero_h, axis=0)


s = 0
for i in range(1, N-L+1):
  if xn[-i]==0:
    s+=1

# print(s)

if big_n%L == 0 and s != N-L:
  xn = np.append(xn, np.zeros((L)))
# print(xn)

temp = None
y_temp = np.empty((ceil(len(xn)/L), N))
temp2 = None
temp_h = None

for i in range(0, ceil(len(xn)/L)):
  temp = xn[i*L:(i+1)*L]
  if len(temp)<L:
    zero_x = np.zeros((L - len(temp)))
    temp = np.append(temp, zero_x, axis=0)
  if i == 0:
    temp = np.insert(temp, 0, np.zeros((N-L)))
  else:
    temp = np.insert(temp, 0, temp2[-(N-L):])
  # print(temp)

  temp_h = cc_impMatrix(hn)
  y_temp[i] = np.dot(temp_h, temp)

  temp2 = xn[i*L:(i+1)*L]

y = None

for i in range(len(y_temp)):
  y = np.append(y, y_temp[i][2:])

y = y[1:]
print(y)
